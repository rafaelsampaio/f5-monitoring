logstash:
  image: "docker.elastic.co/logstash/logstash-oss"
  antiAffinity: soft
  service:
    type: ClusterIP
    ports:
      - name: f5-waf
        port: 5144
        protocol: TCP
        targetPort: 5144
      - name: f5-ts
        port: 8514
        protocol: TCP
        targetPort: 8514
  extraPorts:
    - name: f5-waf
      containerPort: 5144
    - name: f5-ts
      containerPort: 8514
  logstashConfig:
    pipelines.yml: |
      - pipeline.id: f5-waf
        path.config: "/usr/share/logstash/pipeline/f5-waf.conf"
        pipeline.ecs_compatibility: v1
      - pipeline.id: f5-ts
        path.config: "/usr/share/logstash/pipeline/f5-ts.conf"
        pipeline.ecs_compatibility: v1
      - pipeline.id: beats
        path.config: "/usr/share/logstash/pipeline/logstash.conf"
        pipeline.ecs_compatibility: v1
  logstashPipeline:
    f5-waf.conf: |
      input {
        syslog {
          port => 5144
          codec => plain {
            charset => "ISO-8859-1"
          }
        }
      }
      filter {
        grok {
          match => {
            "message" => [
              ",attack_type=\"%{DATA:attack_type}\"",
              ",blocking_exception_reason=\"%{DATA:blocking_exception_reason}\"",
              ",bot_anomalies=\"%{DATA:bot_anomalies}\"",
              ",bot_category=\"%{DATA:bot_category}\"",
              ",bot_signature_name=\"%{DATA:bot_signature_name}\"",
              ",client_application=\"%{DATA:client_application}\"",
              ",client_application_version=\"%{DATA:client_application_version}\"",
              ",client_class=\"%{DATA:client_class}\"",
              ",date_time=\"%{DATA:date_time}\"",
              ",dest_port=\"%{DATA:dest_port}\"",
              ",enforced_bot_anomalies=\"%{DATA:enforced_bot_anomalies}\"",
              ",grpc_method=\"%{DATA:grpc_method}\"",
              ",grpc_service=\"%{DATA:grpc_service}\"",
              ",ip_client=\"%{DATA:ip_client}\"",
              ",is_truncated=\"%{DATA:is_truncated}\"",
              ",method=\"%{DATA:method}\"",
              ",outcome=\"%{DATA:outcome}\"",
              ",outcome_reason=\"%{DATA:outcome_reason}\"",
              ",policy_name=\"%{DATA:policy_name}\"",
              ",protocol=\"%{DATA:protocol}\"",
              ",request_status=\"%{DATA:request_status}\"",
              ",request=\"%{DATA:request}\"",
              ",request_body_base64=\"%{DATA:request_body_base64}\"",
              ",response_code=\"%{DATA:response_code}\"",
              ",severity=\"%{DATA:severity}\"",
              ",sig_cves=\"%{DATA:sig_cves}\"",
              ",sig_ids=\"%{DATA:sig_ids}\"",
              ",sig_names=\"%{DATA:sig_names}\"",
              ",sig_set_names=\"%{DATA:sig_set_names}\"",
              ",src_port=\"%{DATA:src_port}\"",
              ",staged_sig_cves=\"%{DATA:staged_sig_cves}\"",
              ",staged_sig_ids=\"%{DATA:staged_sig_ids}\"",
              ",staged_sig_names=\"%{DATA:staged_sig_names}\"",
              ",staged_threat_campaign_names=\"%{DATA:staged_threat_campaign_names}\"",
              ",sub_violations=\"%{DATA:sub_violations}\"",
              ",support_id=\"%{DATA:support_id}\"",
              ",threat_campaign_names=\"%{DATA:threat_campaign_names}\"",
              ",unit_hostname=\"%{DATA:unit_hostname}\"",
              ",uri=\"%{DATA:uri}\"",
              ",violations=\"%{DATA:violations}\"",
              ",violation_details=\"%{DATA:violation_details_xml}\"",
              ",violation_rating=\"%{DATA:violation_rating}\"",
              ",vs_name=\"%{DATA:vs_name}\"",
              ",x_forwarded_for_header_value=\"%{DATA:x_forwarded_for_header_value}\""
            ]
          }
          break_on_match => false
        }
        if [violation_details_xml] != "N/A" {
          xml {
            source => "violation_details_xml"
            target => "violation_details"
          }
        }
        mutate {
          split => { "attack_type" => "," }
          split => { "sig_cves" => "," }
          split => { "sig_ids" => "," }
          split => { "sig_names" => "," }
          split => { "sig_set_names" => "," }
          split => { "staged_sig_cves" => "," }
          split => { "staged_sig_ids" => "," }
          split => { "staged_sig_names" => "," }
          split => { "staged_threat_campaign_names" => "," }
          split => { "sub_violations" => "," }
          split => { "threat_campaign_names" => "," }
          split => { "violations" => "," }
          remove_field => [
            "[violation_details][violation_masks]",
            "violation_details_xml",
            "message"
          ]
        }
        if [x_forwarded_for_header_value] in ["N/A", "-"] {
          mutate { add_field => { "source_host" => "%{x_forwarded_for_header_value}"}}
        } else {
          mutate { add_field => { "source_host" => "%{ip_client}"}}
        }
        geoip {
          source => "source_host"
          target => "geoip"
        }
        ruby {
            code => "
                require 'base64';

                data = event.get('[violation_details]');

                def check64(value)
                  value.is_a?(String) && Base64.strict_encode64(Base64.decode64(value)) == value;
                end

                def iterate(key, i, event)
                  if i.is_a?(Hash)
                    i.each do |k, v|
                      if v.is_a?(Hash) || v.is_a?(Array)
                        newkey = key + '[' + k + ']';
                        iterate(newkey, v, event)
                      end
                    end
                  else if i.is_a?(Array)
                    i.each do |v|
                          iterate(key, v, event)
                    end
                  else
                    if check64(i)
                      event.set(key, Base64.decode64(i))
                    end
                  end
                end
                end
                iterate('[violation_details_b64decoded]', data, event)
            "
          }
      }
      output {
        elasticsearch {
          hosts => ["http://elasticsearch-master:9200"]
          index => "f5-waf-logs-%{+YYYY.MM.dd}"
        }
      }
    f5-ts.conf: |
      input {
          http {
              port => 8514
          }
      }
      filter {
          json {
              source => "message"
              ecs_compatibility => "v1"
          }

          mutate {
              split => {
                  "[headers][x_forwarded_for]" => ","
                  "[headers][x_real_ip]" => ","
              }
              convert => {
                  "[a_reqs]" => "integer"
                  "[aaaa_reqs]" => "integer"
                  "[abandoned_conns]" => "integer"
                  "[aborts]" => "integer"
                  "[accept_fails]" => "integer"
                  "[accepted_count]" => "integer"
                  "[accepts]" => "integer"
                  "[active_conns]" => "integer"
                  "[active_translations]" => "integer"
                  "[AggrInterval]" => "integer"
                  "[any_reqs]" => "integer"
                  "[ApplicationResponseTime]" => "integer"
                  "[AttackCount]" => "integer"
                  "[avg_1min]" => "integer"
                  "[AvgBadActorDetection]" => "integer"
                  "[AvgDetection]" => "integer"
                  "[backup_pool_translations]" => "integer"
                  "[BadActorDrops]" => "integer"
                  "[BadActorEvents]" => "integer"
                  "[bd_avg_cpu_util]" => "integer"
                  "[bd_total_max_mem]" => "integer"
                  "[bd_total_mem_allocated]" => "integer"
                  "[bd_total_mem_used]" => "integer"
                  "[bd_total_xml_max_mem]" => "integer"
                  "[bd_total_xml_mem_used]" => "integer"
                  "[blade_num]" => "integer"
                  "[bytes_in]" => "integer"
                  "[bytes_out]" => "integer"
                  "[client_bytes_in]" => "integer"
                  "[client_bytes_out]" => "integer"
                  "[client_concurrent_conns]" => "integer"
                  "[client_conn_dur]" => "integer"
                  "[client_conns]" => "integer"
                  "[client_expired_conns]" => "integer"
                  "[client_max_concurrent_conns]" => "integer"
                  "[client_pkts_in]" => "integer"
                  "[client_pkts_out]" => "integer"
                  "[ClientLatencyHitCount]" => "integer"
                  "[ClientLatencyTotal]" => "integer"
                  "[ClientSideNetworkLatency]" => "integer"
                  "[ClientTtfb]" => "integer"
                  "[ClientTtfbHitcount]" => "integer"
                  "[cname_reqs]" => "integer"
                  "[connq_age_head_max]" => "integer"
                  "[connq_age_head]" => "integer"
                  "[connq_depth_max]" => "integer"
                  "[connq_depth]" => "integer"
                  "[counters_drops_in]" => "integer"
                  "[counters_drops_out]" => "integer"
                  "[counters_errors_in]" => "integer"
                  "[counters_errors_out]" => "integer"
                  "[cpu]" => "integer"
                  "[cycle_count]" => "integer"
                  "[dest_port]" => "integer"
                  "[DestinationPort]" => "integer"
                  "[dns64fails]" => "integer"
                  "[dns64reqs]" => "integer"
                  "[dns64trans]" => "integer"
                  "[dropped]" => "integer"
                  "[drops]" => "integer"
                  "[enforced_entities_count]" => "integer"
                  "[err_cksum]" => "integer"
                  "[err_len]" => "integer"
                  "[err_mem]" => "integer"
                  "[err_opt]" => "integer"
                  "[err_proto]" => "integer"
                  "[err_reassembled_too_long]" => "integer"
                  "[err_rtx]" => "integer"
                  "[expired_conns]" => "integer"
                  "[failed_conns]" => "integer"
                  "[fast_dns_allowed]" => "integer"
                  "[fast_dns_drops]" => "integer"
                  "[fast_dns_queries]" => "integer"
                  "[fast_dns_resp_ne]" => "integer"
                  "[fast_dns_resp_nx]" => "integer"
                  "[fast_dns_resp_rf]" => "integer"
                  "[fast_dns_resp_tc]" => "integer"
                  "[fast_dns_responses]" => "integer"
                  "[free_ram]" => "integer"
                  "[free_swap]" => "integer"
                  "[HardwareDrops]" => "integer"
                  "[hdr_aa]" => "integer"
                  "[hdr_ad]" => "integer"
                  "[hdr_ra]" => "integer"
                  "[hdr_tc]" => "integer"
                  "[headers][content_length]" => "integer"
                  "[headers][x_forwarded_port]" => "integer"
                  "[hints]" => "integer"
                  "[HitCount]" => "integer"
                  "[http_requests_limit]" => "integer"
                  "[http_requests]" => "integer"
                  "[http_statcode]" => "integer"
                  "[hw_cache_lookups]" => "integer"
                  "[hw_cache_responses]" => "integer"
                  "[hw_cookie_valid]" => "integer"
                  "[hw_inspected]" => "integer"
                  "[hw_malformed]" => "integer"
                  "[hw_syncookies_accepts]" => "integer"
                  "[hw_syncookies]" => "integer"
                  "[idle_ticks]" => "integer"
                  "[iowait]" => "integer"
                  "[irq]" => "integer"
                  "[malformed]" => "integer"
                  "[malicious]" => "integer"
                  "[max_active_conns]" => "integer"
                  "[max_cpu_index]" => "integer"
                  "[MaxApplicationResponseTime]" => "integer"
                  "[MaxBadActorMitigation]" => "integer"
                  "[MaxClientSideNetworkLatency]" => "integer"
                  "[MaxClientTtfb]" => "integer"
                  "[MaxMitigation]" => "integer"
                  "[MaxRequestDuration]" => "integer"
                  "[MaxResponseDuration]" => "integer"
                  "[MaxServerSideNetworkLatency]" => "integer"
                  "[MinApplicationResponseTime]" => "integer"
                  "[MinBadActorMitigation]" => "integer"
                  "[MinClientSideNetworkLatency]" => "integer"
                  "[MinClientTtfb]" => "integer"
                  "[MinMitigation]" => "integer"
                  "[MinRequestDuration]" => "integer"
                  "[MinResponseDuration]" => "integer"
                  "[MinServerSideNetworkLatency]" => "integer"
                  "[mx_reqs]" => "integer"
                  "[naptr_reqs]" => "integer"
                  "[new_conns]" => "integer"
                  "[nice]" => "integer"
                  "[noerrors]" => "integer"
                  "[ns_reqs]" => "integer"
                  "[other_free_ram]" => "integer"
                  "[other_reqs]" => "integer"
                  "[other_total_ram]" => "integer"
                  "[other_used_ram]" => "integer"
                  "[PacketsSize]" => "integer"
                  "[pending_highscore_count]" => "integer"
                  "[pending_lowscore_count]" => "integer"
                  "[pid]" => "integer"
                  "[policy_changes_count]" => "integer"
                  "[pool_port]" => "integer"
                  "[proc_id]" => "integer"
                  "[ptr_reqs]" => "integer"
                  "[queries]" => "integer"
                  "[r_noerror]" => "integer"
                  "[r_nxdomain]" => "integer"
                  "[r_refused]" => "integer"
                  "[r_servfail]" => "integer"
                  "[rd_bytes]" => "integer"
                  "[rd_lat_us]" => "integer"
                  "[rd_merged]" => "integer"
                  "[rd_ops]" => "integer"
                  "[reassembled]" => "integer"
                  "[rejects]" => "integer"
                  "[RequestDurationHitcount]" => "integer"
                  "[Requests]" => "integer"
                  "[response_code]" => "integer"
                  "[response_ms]" => "integer"
                  "[ResponseDuration]" => "integer"
                  "[ResponseDurationHitcount]" => "integer"
                  "[responses]" => "integer"
                  "[rss]" => "integer"
                  "[rx_frag_dropped]" => "integer"
                  "[rx_frag]" => "integer"
                  "[rx]" => "integer"
                  "[rxbaddgram]" => "integer"
                  "[rxbadsum]" => "integer"
                  "[rxdgram]" => "integer"
                  "[rxnosum]" => "integer"
                  "[rxunreach]" => "integer"
                  "[server_bytes_in]" => "integer"
                  "[server_bytes_out]" => "integer"
                  "[server_concurrent_conns]" => "integer"
                  "[server_conns]" => "integer"
                  "[server_max_concurrent_conns]" => "integer"
                  "[server_pkts_in]" => "integer"
                  "[server_pkts_out]" => "integer"
                  "[ServerHitcount]" => "integer"
                  "[ServerLatencyMax]" => "integer"
                  "[ServerLatencyMin]" => "integer"
                  "[ServerLatencyTotal]" => "integer"
                  "[ServerSideNetworkLatency]" => "integer"
                  "[severity]" => "integer"
                  "[SlotId]" => "integer"
                  "[soa_reqs]" => "integer"
                  "[softirq]" => "integer"
                  "[SoftwareDrops]" => "integer"
                  "[SosApplicationResponseTime]" => "integer"
                  "[SosClientSideNetworkLatency]" => "integer"
                  "[SosClientTtfb]" => "integer"
                  "[SosRequestDuration]" => "integer"
                  "[SosResponseDuration]" => "integer"
                  "[SosServerSideNetworkLatency]" => "integer"
                  "[SourcePort]" => "integer"
                  "[src_port]" => "integer"
                  "[srv_reqs]" => "integer"
                  "[stress]" => "integer"
                  "[stresscpu]" => "integer"
                  "[swap_size]" => "integer"
                  "[syncookies_accepts]" => "integer"
                  "[syncookies_rejects]" => "integer"
                  "[syncookies]" => "integer"
                  "[system_swap_size]" => "integer"
                  "[system_ticks]" => "integer"
                  "[TcDisabledRequests]" => "integer"
                  "[TcFiltersCheckPassedRequests]" => "integer"
                  "[TcMemoryCheckPassedRequests]" => "integer"
                  "[TcSamplingPassedRequest]" => "integer"
                  "[ThroughputReqTotalPerInterval]" => "integer"
                  "[ThroughputRespMaxPerSec]" => "integer"
                  "[ThroughputRespTotalPerInterval]" => "integer"
                  "[tmm_avg_cpu_util]" => "integer"
                  "[tmm_free_ram]" => "integer"
                  "[tmm_memory_total]" => "integer"
                  "[tmm_memory_used]" => "integer"
                  "[tmm_total_ram]" => "integer"
                  "[tmm_used_ram]" => "integer"
                  "[Tmm]" => "integer"
                  "[todns]" => "integer"
                  "[tot_requests]" => "integer"
                  "[total_executions]" => "integer"
                  "[total_ios]" => "integer"
                  "[total_ram]" => "integer"
                  "[total_swap]" => "integer"
                  "[TotalEvents]" => "integer"
                  "[TPSMax]" => "integer"
                  "[transactions]" => "integer"
                  "[translation_request_failures]" => "integer"
                  "[translation_requests]" => "integer"
                  "[tx_frag_dropped]" => "integer"
                  "[tx_frag]" => "integer"
                  "[tx]" => "integer"
                  "[txdgram]" => "integer"
                  "[txt_reqs]" => "integer"
                  "[udp_prof]" => "integer"
                  "[used_ram]" => "integer"
                  "[used_swap]" => "integer"
                  "[user_ticks]" => "integer"
                  "[UserSessionsConcurrentTotal]" => "integer"
                  "[UserSessionsNewTotal]" => "integer"
                  "[violation_rating]" => "integer"
                  "[WLEvents]" => "integer"
                  "[wr_bytes]" => "integer"
                  "[wr_merged]" => "integer"
                  "[wr_ops]" => "integer"
              }
          }

          mutate {
              add_field => {
                  "[@metadata][target_index]" => "%{[telemetryEventCategory]}-%{+YYYY.MM.dd}"
              }
          }

          if "systemInfo" in [telemetryEventCategory] {
              date {
                  match => [ "[system][systemTimestamp]", "MMM d, yyyy @ HH:mm:ss.SSS" ]
                  timezone => "UTC"
              }
          }
          else if "LTM" in [telemetryEventCategory] {
              date {
                  match => [ "[event_timestamp]","MMM d, yyyy @ HH:mm:ss.SSS" ]
                  timezone => "UTC"
              }
              geoip {
                  source => "[client_ip]"
                  target => "[client_geo]"
              }
          }
          else if "AFM" in [telemetryEventCategory] {
              date {
                  match => [ "[date_time]","MMM d, yyyy @ HH:mm:ss.SSS" ]
                  timezone => "UTC"
              }
              geoip {
                  source => "[dest_ip]"
                  target => "[dest_geo]"
              }
              geoip {
                  source => "[source_ip]"
                  target => "[source_geo]"
              }
          }
          else if "ASM" in [telemetryEventCategory] {
              date {
                  match => [ "[date_time]","MMM d, yyyy @ HH:mm:ss.SSS" ]
                  timezone => "UTC"
              }
              date {
                  match => [ "[policy_apply_date]","yyyy-MM-dd HH:mm:ss" ]
                  target => "[policy_apply_date]"
                  timezone => "UTC"
              }
              geoip {
                  source => "[dest_ip]"
                  target => "[dest_geo]"
              }
              geoip {
                  source => "[source_host]"
                  target => "[source_geo]"
              }
          }
          else if "APM" in [telemetryEventCategory] {

          }
          else if "ihealthInfo" in [telemetryEventCategory] {

          }
          else if "AVR" in [telemetryEventCategory] {
              date {
                  match => [ "[EOCTimestamp]","UNIX" ]
                  timezone => "UTC"
              }
              if [LatencyHistogram] {
                  ruby {
                      code => "
                          histogram_hash = event.get('[LatencyHistogram]').split('|')
                          event.set('[LatencyHistogram][values]', histogram_hash[0].split(','))
                          event.set('[LatencyHistogram][counts]', histogram_hash[1].split(','))
                      "
                  }
              }
              geoip {
                  source => "[client_ip]"
                  target => "[client_geo]"
              }
          }
          else {

          }
      }
      output {
          elasticsearch {
              hosts => ["http://elasticsearch-master:9200"]
              index => "f5-ts-%{[@metadata][target_index]}"
          }
      }

elasticsearch:
  antiAffinity: "soft"
  #replicas: 1
  #minimumMasterNodes: 1
  resources:
    requests:
      memory: 4Gi
    limits:
      memory: 4Gi

kibana:
  lifecycle:
    postStart:
      exec:
        command:
          - bash
          - -c
          - |
            #!/bin/bash
            KB_URL=http://localhost:5601
            while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' -L $KB_URL)" != "200" ]]; do sleep 1; done
            curl -XPOST "$KB_URL/api/kibana/dashboards/import" -H "Content-Type: application/json" -H 'kbn-xsrf: true' -d'{"objects":[{"type":"index-pattern","id":"f5-waf","attributes":{"title":"f5-waf-logs-*"}},{"type":"index-pattern","id":"f5-ts-stats","attributes":{"title":"f5-ts-stats-*","timeFieldName":"eventTimestamp"}},{"type":"index-pattern","id":"f5-ts-events-ltm","attributes":{"title":"f5-ts-events-ltm-*","timeFieldName":"eventTimestamp"}},{"type":"index-pattern","id":"f5-ts-events-afm","attributes":{"title":"f5-ts-events-afm-*","timeFieldName":"eventTimestamp"}},{"type":"index-pattern","id":"f5-ts-events-asm","attributes":{"title":"f5-ts-events-asm-*","timeFieldName":"eventTimestamp"}},{"type":"index-pattern","id":"f5-ts-events-avr","attributes":{"title":"f5-ts-events-avr-*","timeFieldName":"eventTimestamp"}}]}'

prometheus:
  extraScrapeConfigs: {}

  pushgateway:
    enabled: false

grafana:
  persistence:
    enabled: true
    type: pvc
    accessModes:
      - ReadWriteOnce
    size: 4Gi
    finalizers:
      - kubernetes.io/pvc-protection
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://dashboards-prometheus-server
          isDefault: true
        - name: Elasticsearch-WAF
          type: elasticsearch
          url: http://elasticsearch-master:9200
          database: "f5-waf-logs-*"
          jsonData:
            esVersion: "7.0+"
            timeField: "@timestamp"
        - name: Elasticsearch-TS-stats
          type: elasticsearch
          url: http://elasticsearch-master:9200
          database: "f5-ts-stats-*"
          jsonData:
            esVersion: "7.0+"
            timeField: "@timestamp"
        - name: Elasticsearch-TS-events-ltm
          type: elasticsearch
          url: http://elasticsearch-master:9200
          database: "f5-ts-events-ltm-*"
          jsonData:
            esVersion: "7.0+"
            timeField: "@timestamp"
        - name: Elasticsearch-TS-events-afm
          type: elasticsearch
          url: http://elasticsearch-master:9200
          database: "f5-ts-events-afm-*"
          jsonData:
            esVersion: "7.0+"
            timeField: "@timestamp"
        - name: Elasticsearch-TS-events-asm
          type: elasticsearch
          url: http://elasticsearch-master:9200
          database: "f5-ts-events-asm-*"
          jsonData:
            esVersion: "7.0+"
            timeField: "@timestamp"
        - name: Elasticsearch-TS-events-avr
          type: elasticsearch
          url: http://elasticsearch-master:9200
          database: "f5-ts-events-avr-*"
          jsonData:
            esVersion: "7.0+"
            timeField: "@timestamp"
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "nginx"
          orgId: 1
          folder: "NGINX"
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/nginx
        - name: "security"
          orgId: 1
          folder: "Security"
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/security
  dashboards:
    nginx:
      nginxplus:
        url: https://raw.githubusercontent.com/rafaelsampaio/f5-monitoring/main/grafana/NGINXPlusICDashboard.json
        datasource: Prometheus
      nginxoss:
        url: https://raw.githubusercontent.com/rafaelsampaio/f5-monitoring/main/grafana/NGINXOSSICDashboard.json
        datasource: Prometheus
    security:
      f5waf:
        url: https://raw.githubusercontent.com/rafaelsampaio/f5-monitoring/main/grafana/WAFDashboard.json
        datasource: Elasticsearch-WAF
  service:
    type: NodePort
    nodePort: 32517

